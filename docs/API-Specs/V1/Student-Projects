# Student Project API Specification

This document outlines all API endpoints for Create, Read, Update, and Delete (CRUD) operations that may be performed on student project postings.

## What should a user be able to do?

1. All Users should be able to search for projects by their attributes
1. A Student Creates a New Project, they are the project owner
1. Project owner should be able to give the project a title
1. Project owner should be able to add / remove contributors.
1. All contributors should be able to add and remove skill tags
1. All contributors should be able update a projects description
1. All contributors should be able upload images / specify external images.
1. All contributors should be able to add, update, or remove external links.
1. All contributors should be able add, update, or remove project question prompts.
1. Project Owner should be able to set which course / group the project was for.
1. Project Owner should be able to delete the project.
1. All users able to read project title, description, collaborators, skill tags, images, links, and group.

## API Endpoints

### Project Search `GET` `/api/v1/project`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Project Creation: `POST` `/api/v1/project/`

This project allows a user with a student role to create an empty student project. Only authenticated users with a
student designation can create a project. The user that creates this project will be classified as the project owner.
This project will be defined with draft visibility, so its only visible to owner and contributors.

#### Request

Headers

- `Authorization`: The session token for the user trying to create the post.

Query Params
None

Body
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:

```typescript
{
    project_id?: string;
}
```

Status

- Status 201: Created
  - Project was created successfully
  - project_id will be the UUID for the project
- Status 401: Unauthorized
  - Returned if the Authorization header is blank or undefined. (The user is not logged in)
  - Could also be returned if the auth header is invalid, like the user tried to mess with their token.
  - project_id will be undefined
- Status 403: Forbidden
  - Returned if the user trying to create the project is not a student.
  - project_id will be undefined
- Status 500: Server Error
  - An internal server error occurred.
  - project_id will be undefined

### Full Project Read: `GET` `/api/v1/project/[project_id]`

Returns the all the information for a project. All users are allowed to call to this endpoint.
If this project is marked as draft, then this will return 404 for all users except the owner and collaborator.

#### Request

Headers

- `Authorization`: The session token for the user trying to read the post. This is optional.

Query Params:
None

Body:
None

#### Response

Headers

- `Content-Type`: `application/json`

Body:

```typescript
{
  project_id?: {
    project_id: string,
    title: string,
    contributors: {
        name: string,
        email: string,
    }[],
    skill_tags: {
        tag: string,
        id: string,
    }[],
    images: {
        link: string,
        caption: string
    }[],
    links: {
        link: string,
        coverText: string,
    }[],
    questions: {
        id: string,
        questionText: string,
        answerText: string,
    }[],
    group: {
        group: string,
        id: string
    },
  }
}
```

Status:

- 200: Project Fetched Successfully
  - project will be fully populated
- 404: The requested project was not found or the user did not have permission to access it
  - project will be undefined
- 500: Internal Server Error
  - project will be undefined

### Project Delete: `DELETE` `/api/v1/project/[project_id]`

Deletes the specified project. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to delete the project.

Query Params:
None

Body:
None

#### Response

Headers

- `Content-Type`: `application/json`

Body:
None

Status:

- 204: Project Deleted Successfully
- 401: The authentication token was not provided or was invalid
- 403: The user is not the owner of the project
- 404: The requested project was not found
- 500: Internal Server Error

### Set Project Visibility `PUT` `/api/v1/project/[project_id]/visibility`

Sets the project visibility. Only the owner of the project can call to this endpoint.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:

```typescript
{
  visibility: "public" | "draft";
}
```

#### Response

Headers:

- `Content-Type`: `application/json`

Body:

```typescript
{
    visibility?: "public" | "draft"
}
```

Status:

- 200: Visibility Set Successfully
  - `visibility` will be set to the updated visibility value
- 400: Description
  - `visibility` will be undefined
- 401: Description
  - `visibility` will be undefined
- 403: Description
  - `visibility` will be undefined
- 500: Description
  - `visibility` will be undefined

### Set Project Title `PUT` `/api/v1/project/[project_id]/title`

Sets the title for the project. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to update the project title.

Query Params:
None

Body:

```typescript
{
  newTitle: string;
}
```

#### Response

Headers

- `Content-Type`: `application/json`

Body:

```typescript
{
    title?: string
}
```

Status:

- 200: Title Updated Successfully
  - title value will reflect the new title
- 401: The authentication token was not provided or was invalid
  - title value will be undefined
- 403: The user is not the owner of the project
  - title value will be undefined
- 404: The requested project was not found
  - title value will be undefined
- 500: Internal Server Error
  - title value will be undefined

### Add Contributor `POST` `/api/v1/project/[project_id]/contributor`

Adds a new contributor to the project. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to add the contributor.

Query Params:
None

Body:
None

#### Response

Headers:
none

Body:

```typescript
{
    contributor_id?: string
}
```

Status:

- 200: Contributor Updated Successfully
  - Contributor id will be populated with the UUID for the contributor
- 401: The authentication token was not provided or was invalid
- 403: The user is not the owner of the project
- 404: The requested project was not found
- 500: Internal Server Error

### Update Contributor `PUT` `/api/v1/project/[project_id]/contributor/[contributor_id]`

Updates the name and email of the specified contributor. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to update the project title.

Query Params:
None

Body:

```typescript
{
    name: string,
    email: string
}
```

#### Response

Headers

- `Content-Type`: `application/json`

Body:

```typescript
{
    name?: string,
    email?: string
}
```

Status:

- 200: Title Updated Successfully
  - Name and email will be set to the new value
- 401: The authentication token was not provided or was invalid
  - Name and Email value will be undefined
- 403: The user is not the owner of the project
  - Name and Email value will be undefined
- 404: The requested project was not found
  - Name and Email value will be undefined
- 500: Internal Server Error
  - Name and Email value will be undefined

### Delete Contributor `DELETE` `/api/v1/project/[project_id]/contributor/[contributor_id]`

Removes a contributor from the project. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to update the project title.

Query Params:
None

Body:
None

#### Response

Headers

- `Content-Type`: `application/json`

Body:
None

Status:

- 204: Contributor was removed successfully
- 401: The authentication token was not provided or was invalid
- 403: The user is not the owner of the project
- 404: The requested project was not found
- 500: Internal Server Error

### List All Existing Skill Tags `GET` `/api/v1/project/skill-tags/`

Lists all the existing skill tags. Can be called by any student.

#### Request

Headers

- `Authorization`: The session token for the user trying to list the skill tags.

Query Params:
None

Body:
None

#### Response

Headers:
`Content-Type`: `application/json`

Body:

```typescript
{
    tags?: {
        tag_id: string,
        skill: string,
    }[]
}
```

Status:

- 200: Tags are listed in the body
  - tags will be populated with all the existing tags.
- 401: The authentication token was not provided or was invalid
  - tags will be undefined
- 403: The user is not a student
  - tags will be undefined
- 500: Internal Server Error
  - tags will be undefined

### Create New Skill Tag `POST` `/api/v1/project/skill-tags/`

Creates a new skill tag on the database. This can only be called by students.

#### Request

Headers

- `Authorization`: The session token for the user trying to create the skill tag.

Query Params:
None

Body:

```typescript
{
    skill: string,
}
```

#### Response

Headers:
`Content-Type`: `application/json`

Body:

```typescript
{
    tag?:{
        tag_id: string,
        skill: string,
    }
}
```

Status:

- 200: Tag Added Successfully
  - tags will be populated with all the existing tags.
- 401: The authentication token was not provided or was invalid
  - tags will be undefined
- 403: The user is not a student
  - tags will be undefined
- 500: Internal Server Error
  - tags will be undefined

### Add Skill Tag to Project `POST` `/api/v1/project/[project_id]/skill-tag/[tag_id]`

Adds a reference to a skill tag to the specified post. This can only be called by collaborators on the project.

#### Request

Headers

- `Authorization`: The session token for the user trying to add the skill tag.

Query Params:
None

Body:
None

#### Response

Headers:
`Content-Type`: `application/json`

Body:

```typescript
{
    message?: string
}
```

Status:

- 200: Tag Added Successfully
  - message will say "OK"
- 401: The authentication token was not provided or was invalid
  - message will be undefined
- 403: The user is not a contributor on the project
  - message will be undefined
- 404: The requested project or skill tag was not found
  - message will either say "Project Not Found", or "Skill Tag Not Found"
- 500: Internal Server Error
  - message will be undefined

### Remove Skill Tag `DELETE` `/api/v1/project/[project_id]/skill-tag/[tag_id]`

Removes a reference to a skill tag to the specified post. This can only be called by collaborators on the project.

#### Request

Headers

- `Authorization`: The session token for the user trying to add the skill tag.

Query Params:
None

Body:
None

#### Response

Headers:
`Content-Type`: `application/json`

Body:

```typescript
{ message: string} | undefined
```

Status:

- 200: Tag Removed Successfully
  - Body will be undefined
- 401: The authentication token was not provided or was invalid
  - Body will be undefined
- 403: The user is not a contributor on the project
  - Body will be undefined
- 404: The requested project or skill tag was not found on the project
  - message will either say "Project Not Found", or "Skill Tag Not Found On Project"
- 500: Internal Server Error
  - message will be undefined

### Update Description `PUT` `/api/v1/project/[project_id]/description`

Changes the description of the project. This can only be called by collaborators on the project.

#### Request

Headers

- `Authorization`: The session token for the user trying to update the description.

Query Params:
None

Body:

```typescript
{
  description: string;
}
```

#### Response

Headers:
`Content-Type`: `application/json`

Body:

```typescript
{
    description?:string
}
```

Status:

- 200: Description Updated Successfully
  - `description` will reflect the updated description.
- 401: The authentication token was not provided or was invalid
  - `description` will be undefined.
- 403: The user is not a contributor on the project
  - `description` will be undefined.
- 404: The requested project could not be found
  - `description` will be undefined.
- 500: Internal Server Error
  - `description` will be undefined.

### Serve Image `GET` `/api/v1/project/[project_id]/image/[image_id]`

Serves the specified image. Can be called by anyone. If the `Authorization` header is not provided
then any images for projects with `draft` visibility will return 404.

#### Request

Headers:

- `Authorization`: The session token for the user. (Optional)

Query Params:
None

Body:
None

#### Response

Headers:
- `Content-Type`:
  - `image/png` for Portable Network Graphics images.
  - `image/jpeg` for Joint Photographic Experts Group images.
  - `image/gif` for Graphics Interchange Format images.
  - `image/svg+xml` for Scalable Vector Graphics images.
  - `image/webp` for WebP images.
  - `image/x-icon` for ICO (icon) files.

Body:
ReadableStream of Image Data or undefined.

Status:

- 200: Image was served.
- 404: Image was not found or the specified user did not have visibility rights to this post.
  - Body will be undefined
- 500: Internal Server Error
  - Body will be undefined

### Add Image `POST` `/api/v1/project/[project_id]/image`

Uploads an image to the MinIO database and links it to this project. Can be called by all project contributors.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Remove Image `DELETE` `/api/v1/project/[project_id]/image/[image_id]`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Add Link `POST` `/api/v1/project/[project_id]/link`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Update Link `PUT` `/api/v1/project/[project_id]/link/[link_id]`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Delete Link `DELETE` `/api/v1/project/[project_id]/link/[link_id]`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Add Question `POST` `/api/v1/project/[project_id]/question`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Update Question `PUT` `/api/v1/project/[project_id]/question/[question_id]`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Delete Question `DELETE` `/api/v1/project/[project_id]/question/[question_id]`

API Endpoint Description. Also describe who should be able to call to this API.

#### Request

Headers:

- `Authorization`: The session token for the user.

Query Params:
None

Body:
None

#### Response

Headers:

- `Content-Type`: `application/json`

Body:
None

Status:

- 200: Description
  - Additional Notes
- 400: Description
  - Additional Notes
- 401: Description
  - Additional Notes
- 403: Description
  - Additional Notes
- 500: Description
  - Additional Notes

### Set Course / Group `PUT` `/api/v1/project/[project_id]/course`

Sets the course / group for the project. This can only be performed by the project owner.

#### Request

Headers

- `Authorization`: The session token for the user trying to update the project title.

Query Params:
None

Body:

```typescript
{
  group: string;
}
```

#### Response

Headers

- `Content-Type`: `application/json`

Body:

```typescript
{
    group?: string
}
```

Status:

- 200: Group Updated Successfully
  - group value will reflect the new group
- 401: The authentication token was not provided or was invalid
  - group value will be undefined
- 403: The user is not the owner of the project
  - group value will be undefined
- 404: The requested project was not found
  - group value will be undefined
- 500: Internal Server Error
  - group value will be undefined
